{"version":3,"sources":["webpack:///./components/List/ListGroup.tsx","webpack:///./components/Icon/index.tsx","webpack:///./components/Checkbox/CheckboxItem.tsx","webpack:///./site/pages/Form/Checkbox/index.tsx","webpack:///./components/Checkbox/Checkbox.tsx","webpack:///./components/Checkbox/style/index.scss"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0B;AACU;AACR;AACF;AAC1B;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAK,uBAAuB,YAAY,iDAAU,4FAA4F;AAC1J,QAAQ,4CAAK,eAAe,qDAAI,GAAG,6DAA6D;AAChG;AACe,qGAAK,gBAAgB,EAAC;;;;;;;;;ACZrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0B;AACU;AACR;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAK,qBAAqB,YAAY,iDAAU,kEAAkE,aAAa,mCAAmC;AAC9K,qBAAqB,4CAAK;AAC1B;AACA;AACe,qGAAK,WAAW,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBS;AACL;AACM;AACW;AAClB;AACD;AACN;AAC5B;AACA,6cAA6c,mCAAM;AACnd,kBAAkB,2BAAU,CAAC,kCAAW;AACxC;AACA;AACA;AACA,YAAY,eAAK,yBAAyB,YAAY,oBAAU,uBAAuB,qDAAqD,sBAAsB;AAClK,QAAQ,eAAK,eAAe,2BAAQ,GAAG,YAAY,oBAAU,kEAAkE,eAAK,eAAe,gCAAa,GAAG,wOAAwO;AAC3Y,gBAAgB,eAAK,eAAe,2BAAQ,EAAE,qCAAQ,GAAG,WAAW;AACpE;AACe,yEAAK,mBAAmB,EAAC;;;ACjBd;AACoB;AAC+B;AAC7E;AACA;AACA,YAAY,eAAK,eAAe,uBAAI,GAAG,+CAA+C,eAAK,eAAe,yBAAM,GAAG,wCAAwC,yBAAyB,EAAE,EAAE,yBAAyB,eAAK,eAAe,2BAAQ,GAAG,0BAA0B;AAC1Q,YAAY,eAAK,wBAAwB,gCAAgC;AACzE;AACA,gBAAgB,eAAK,qEAAqE;AAC1F,QAAQ,eAAK,eAAe,4BAAS;AACrC,YAAY,eAAK,eAAe,qBAAY,GAAG,4CAA4C;AAC3F,YAAY,eAAK,eAAe,qBAAY,GAAG,4CAA4C;AAC3F;AACe,6HAAU,cAAc,EAAC;;;;;;;;;ACbxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACL;AACV;AACgB;AACf;AACC;AAC5B,eAAe,4CAAK;AACpB;AACA,8PAA8P,4DAAM;AACpQ,aAAa,uEAAW;AACxB,sBAAsB,iDAAU,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAK,wBAAwB,YAAY,iDAAU,8BAA8B;AAC7F,QAAQ,4CAAK,wBAAwB,8DAAQ,GAAG,SAAS,0BAA0B,iBAAiB,mBAAmB,IAAI,0BAA0B,IAAI,mHAAmH;AAC5Q,QAAQ,4CAAK,eAAe,qDAAI,GAAG,mCAAmC;AACtE,oBAAoB,4CAAK,yBAAyB,kBAAkB;AACpE,CAAC;AACc,qGAAK,eAAe,EAAC;;;;;;;;ACvCpC,uC","file":"js/22.chunk.js","sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\nimport \"./style/index.scss\";\nimport List from \"./List\";\n/**\n * 列表组\n */\nfunction ListGroup(props) {\n    var _a = props.prefixCls, prefixCls = _a === void 0 ? \"weui-cells\" : _a, className = props.className, style = props.style, title = props.title, children = props.children, _b = props.formMode, formMode = _b === void 0 ? true : _b;\n    return (React.createElement(\"div\", { className: classNames(prefixCls + \"__group\", className, formMode ? \"weui-cells__group_form\" : \"\"), style: style },\n        React.createElement(List, { className: formMode ? \"weui-cells_form\" : \"\", title: title }, children)));\n}\nexport default React.memo(ListGroup);\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport \"./style/index.scss\";\n/**\n * 图标\n * @description 配合 @svgr/webpack 使用\n * @param props\n */\nfunction Icon(props) {\n    var _a = props.prefixCls, prefixCls = _a === void 0 ? \"weui-icon\" : _a, className = props.className, style = props.style, onClick = props.onClick, icon = props.icon, _b = props.spin, spin = _b === void 0 ? false : _b, children = props.children;\n    var internal = typeof icon === \"string\";\n    var Icon = icon;\n    return (React.createElement(\"i\", { className: classNames(prefixCls, className, internal ? prefixCls + \"-\" + icon : null, { spin: spin }), style: style, onClick: onClick },\n        !internal && React.createElement(Icon, null),\n        children));\n}\nexport default React.memo(Icon);\n","import { __assign, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport React, { useContext } from \"react\";\nimport { FormContext, FormItemField } from \"xy-form\";\nimport { ListItem } from \"../List\";\nimport Checkbox from \"./Checkbox\";\nimport \"./style/index.scss\";\nfunction CheckboxItem(props) {\n    var footer = props.footer, arrow = props.arrow, className = props.className, disabled = props.disabled, children = props.children, head = props.head, prop = props.prop, valueKey = props.valueKey, converValue = props.converValue, label = props.label, trigger = props.trigger, defaultValue = props.defaultValue, normalize = props.normalize, serialization = props.serialization, disabledValidate = props.disabledValidate, onValidate = props.onValidate, rest = __rest(props, [\"footer\", \"arrow\", \"className\", \"disabled\", \"children\", \"head\", \"prop\", \"valueKey\", \"converValue\", \"label\", \"trigger\", \"defaultValue\", \"normalize\", \"serialization\", \"disabledValidate\", \"onValidate\"]);\n    var content = useContext(FormContext);\n    if (\"disabled\" in props) {\n        rest.disabled = disabled;\n    }\n    return (React.createElement(\"label\", { className: classNames(\"weui-check__label\", { \"weui-cell_disabled\": disabled || content.disabled }), htmlFor: props.id },\n        React.createElement(ListItem, { className: classNames(className, \"checkbox-item\"), footer: footer, arrow: arrow, head: React.createElement(FormItemField, { prop: prop, valueKey: \"checked\", converValue: converValue, label: label, trigger: trigger, defaultValue: defaultValue, normalize: normalize, serialization: serialization, disabledValidate: disabledValidate, onValidate: onValidate },\n                React.createElement(Checkbox, __assign({}, rest))) }, children)));\n}\nexport default React.memo(CheckboxItem);\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { Button, Checkbox, Form, CheckboxItem, ListGroup } from \"weui-react\";\nfunction CheckboxDemo(_a) {\n    var history = _a.history;\n    return (React.createElement(Form, { title: \"\\u590D\\u9009\\u6846\\u6837\\u5F0F\", opr: React.createElement(Button, { type: \"primary\", onClick: function () { return history.goBack(); } }, \"\\u8FD4\\u56DE\"), tips: React.createElement(Checkbox, { className: \"weui-agree\" },\n            React.createElement(\"span\", { className: \"weui-agree__text\" },\n                \"\\u9605\\u8BFB\\u5E76\\u540C\\u610F\",\n                React.createElement(\"a\", null, \"\\u300A\\u76F8\\u5173\\u6761\\u6B3E\\u300B\"))) },\n        React.createElement(ListGroup, null,\n            React.createElement(CheckboxItem, { prop: \"checkbox\", value: \"vvv\", id: \"s11\" }, \"\\u96F7\\u7535\\u63A5\\u53E3\"),\n            React.createElement(CheckboxItem, { prop: \"checkbox\", value: \"ggg\", id: \"s12\" }, \"type-c\\u63A5\\u53E3\"))));\n}\nexport default withRouter(CheckboxDemo);\n","import { __assign, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { useControll } from \"utils-hooks\";\nimport Icon from \"../Icon\";\nimport \"./style/index.scss\";\nvar Checkbox = React.forwardRef(function (props, ref) {\n    var _a;\n    var _b = props.prefixCls, prefixCls = _b === void 0 ? \"weui-check\" : _b, className = props.className, style = props.style, defaultChecked = props.defaultChecked, children = props.children, _c = props.stand, stand = _c === void 0 ? false : _c, rest = __rest(props, [\"prefixCls\", \"className\", \"style\", \"defaultChecked\", \"children\", \"stand\"]);\n    var _d = useControll(props, \"checked\", \"defaultChecked\", false), checked = _d[0], setChecked = _d[1], isControll = _d[2];\n    var classString = classNames(prefixCls, (_a = {},\n        _a[prefixCls + \"-checked\"] = checked,\n        _a[prefixCls + \"-disabled\"] = props.disabled,\n        _a));\n    function changeChecked(check) {\n        if (props.disabled) {\n            return;\n        }\n        if (!isControll) {\n            // 非受控组件将当前checked作为唯一数据源\n            setChecked(check);\n        }\n        if (props.onChange) {\n            props.onChange(check, props.value);\n        }\n    }\n    function handleCheckChange(e) {\n        changeChecked(e.target.checked);\n    }\n    function toggle() {\n        if (!(\"checked\" in props) || stand) {\n            changeChecked(!checked);\n        }\n    }\n    return (React.createElement(\"span\", { className: classNames(\"checkbox-wrap\", className) },\n        React.createElement(\"input\", __assign({}, rest, { value: rest.value || \"\" }, (isControll ? { checked: checked } : { defaultChecked: checked }), { type: \"checkbox\", \"aria-disabled\": props.disabled, className: classString, onChange: handleCheckChange, ref: ref })),\n        React.createElement(Icon, { icon: \"checked\", onClick: toggle }),\n        children && React.cloneElement(children, { onClick: toggle })));\n});\nexport default React.memo(Checkbox);\n","// extracted by mini-css-extract-plugin"],"sourceRoot":""}